{"version":3,"sources":["components/Button.js","components/Slider.js","HelperFunctions.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","algorithms/ShellSort.js","algorithms/CountingSort.js","components/ControlPanel.js","components/Bar.js","components/Histogram.js","App.js","reportWebVitals.js","index.js"],"names":["Button","clickable","clickFunction","text","className","onClick","Slider","changeable","label","min","max","stateVariable","alterState","disabled","type","defaultValue","onChange","event","timeouts","generateHeights","numBars","windowHeight","window","innerHeight","heightMultiplyFactor","Math","floor","heightList","i","push","swapModel","j","array","bubbleSort","sortInProgress","setSortInProgress","pxHeightList","updateView","finishSortStatus","sorted","setSorted","length","delayMultiplier","shallowCopy","insertionSort","curr","selectionSort","currMin","minIndex","mergeSort","merge","left","center","right","leftList","rightList","splice","delay","mergeSortHelper","quickSort","partition","pivot","startIndex","quickSortHelper","partition_index","heapSort","buildMaxHeap","rootIndex","largestIndex","rightChildIndex","leftChildIndex","heapSortHelper","shellSort","gap","currRightElement","countingSort","updateHeightList","fromIndex","toIndex","value","maximum","apply","minimum","rangeArray","countArray","initializeArrays","updateCountArray","cumSumArray","returnArray","previousEntry","newEntry","cumulativeSumArray","previousIndex","sortHeightList","console","log","ControlPanel","setPxHeightList","setNumBars","useState","inherentDelayFactor","setTimeout","algorithmDictionary","id","random","shuffleArray","clearTimeout","parseInt","target","Object","keys","map","sortKey","index","Bar","height","rectangleStyling","style","Histogram","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8155fffa.chunk.js","sourcesContent":["const Button = ({clickable, clickFunction, text}) => {\n    return (\n        <button className = {clickable ? \"clickable\" : \"\"} onClick = {clickFunction}>{text}</button>\n    )\n}\n\nexport default Button\n","const Slider = ({changeable, label, min, max, stateVariable, alterState}) => {\n    const handleChange = (event) => {\n        alterState(event);\n    }\n    \n    return (\n        <div className = \"sliderContainer\">\n            <input disabled = {changeable ? false : true} type=\"range\" min={min} max={max} defaultValue = {stateVariable} onChange = {handleChange}/>\n            <label>{label}</label>\n        </div>\n    )\n}\n\nexport default Slider\n","export let timeouts = [];\n\nexport function generateHeights(numBars) {\n    let windowHeight = 0.8 * window.innerHeight;\n    const heightMultiplyFactor = Math.floor(windowHeight / numBars);\n    let heightList = []\n    for (let i = 1; i <= numBars; i++) {\n      heightList.push(i * heightMultiplyFactor);\n    }\n    return heightList;\n}\n\nexport function swapModel(i, j, array) {\n  [array[i], array[j]] = [array[j], array[i]];\n}\n\nexport function shuffleArray(sortInProgress, pxHeightList, setPxHeightList, setSorted) {\n  if (!sortInProgress) {\n      setSorted(false);\n      let shallowCopy = [...pxHeightList];\n      for (let i = shallowCopy.length - 1; i >= 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          swapModel(i, j, shallowCopy);\n      }\n      setPxHeightList(shallowCopy);\n  }\n}\n","import {swapModel} from '../HelperFunctions.js'\n\nexport function bubbleSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 10;\n        for (let i = 0; i < shallowCopy.length; i++) {\n            for (let j = i + 1; j < shallowCopy.length; j++) {\n                if (shallowCopy[i] > shallowCopy[j]) {\n                    swapModel(i, j, shallowCopy);\n                    updateView(delayMultiplier, delay, shallowCopy);\n                    delayMultiplier += 1;   \n                }\n            }\n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","export function insertionSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 50;\n        for (let i = 1; i < shallowCopy.length; i++) {\n            let curr = shallowCopy[i];\n            let j = i - 1;\n            while (j >= 0 && shallowCopy[j] > curr) {\n                shallowCopy[j + 1] = shallowCopy[j];\n                j--;\n            }\n            shallowCopy[j + 1] = curr;\n            updateView(delayMultiplier, delay, shallowCopy);\n            delayMultiplier += 1;   \n\n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","import {swapModel} from '../HelperFunctions.js'\n\nexport function selectionSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 100;\n        for (let i = 0; i < shallowCopy.length; i++) {\n            let currMin = shallowCopy[i];\n            let minIndex = i;\n            for (let j = i + 1; j < shallowCopy.length; j++) {\n                if (currMin > shallowCopy[j]) {\n                    currMin = shallowCopy[j];\n                    minIndex = j;\n                }\n            }\n            swapModel(i, minIndex, shallowCopy);\n            updateView(delayMultiplier, delay, shallowCopy);\n            delayMultiplier += 1;\n\n            \n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","export function mergeSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 10;\n        mergeSortHelper(0, shallowCopy.length - 1);\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        function mergeSortHelper(left, right) {\n            if (left < right) {\n                let center = Math.floor((left + right) / 2);\n                mergeSortHelper(left, center);\n                mergeSortHelper(center + 1, right);\n                merge(left, center, right);\n            }\n        }\n    \n        function merge(left, center, right) {\n            let leftList = [];\n            let rightList = [];\n            for (let i = left; i <= center; i++) {\n                leftList.push(shallowCopy[i]);\n            }\n            for (let i = center + 1; i <= right; i++) {\n                rightList.push(shallowCopy[i]);\n            }\n            for (let i = left; i <= right; i++) {\n                if (leftList.length === 0) {\n                    shallowCopy[i] = rightList[0];\n                    rightList = rightList.splice(1);\n                } else if (rightList.length === 0 || leftList[0] < rightList[0]) {\n                    shallowCopy[i] = leftList[0];\n                    leftList = leftList.splice(1);\n                } else {\n                    shallowCopy[i] = rightList[0];\n                    rightList = rightList.splice(1);\n                }\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n            }\n        }\n    }\n}","import { swapModel } from \"../HelperFunctions\";\n\nexport function quickSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 20;\n        quickSortHelper(0, shallowCopy.length - 1);\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        function quickSortHelper(left, right) {\n            if (left < right) {\n                let partition_index = partition(left, right);\n                quickSortHelper(left, partition_index - 1);\n                quickSortHelper(partition_index + 1, right);\n            }\n        }\n\n        function partition(left, right) {\n            let pivot = shallowCopy[right];\n            let startIndex = left - 1;\n            for (let j = left; j < right; j++) {\n                if (shallowCopy[j] <= pivot) {\n                    startIndex++;\n                    swapModel(startIndex, j, shallowCopy);\n                    updateView(delayMultiplier, delay, shallowCopy);\n                    delayMultiplier += 1;\n                }\n            }\n            startIndex++;\n            swapModel(startIndex, right, shallowCopy);\n            updateView(delayMultiplier, delay, shallowCopy);\n            delayMultiplier += 1;\n            return startIndex;\n        }\n    }\n}","import { swapModel } from \"../HelperFunctions\";\n\nexport function heapSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 50;\n        heapSortHelper(shallowCopy.length);\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        function heapSortHelper(length) {\n            for (let i = Math.floor(length / 2 - 1); i >= 0; i--) {\n                buildMaxHeap(i, length);\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n            }\n            for (let i = length - 1; i > 0; i--) {\n                swapModel(0, i, shallowCopy);\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n                buildMaxHeap(0, i);\n            }\n        }\n\n        function buildMaxHeap(rootIndex, length) {\n            let largestIndex = rootIndex;\n            let rightChildIndex = rootIndex * 2 + 2;\n            let leftChildIndex = rootIndex * 2 + 1;\n            if (leftChildIndex < length && shallowCopy[leftChildIndex] > shallowCopy[largestIndex]) {\n                largestIndex = leftChildIndex;\n            }\n            if (rightChildIndex < length && shallowCopy[rightChildIndex] > shallowCopy[largestIndex]) {\n                largestIndex = rightChildIndex;\n            }\n            if (largestIndex !== rootIndex) {\n                swapModel(largestIndex, rootIndex, shallowCopy);\n                buildMaxHeap(largestIndex, length);\n            }\n        }\n    }\n}","export function shellSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 20;\n        for (let gap = Math.floor(shallowCopy.length / 2); gap >= 1; gap = Math.floor(gap / 2)) {\n            for (let i = gap; i < shallowCopy.length; i++) {\n                let currRightElement = shallowCopy[i];\n                let j = i;\n                for (j; j >= gap && shallowCopy[j - gap] > currRightElement; j -= gap) {\n                    shallowCopy[j] = shallowCopy[j - gap];\n                }\n                shallowCopy[j] = currRightElement;\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;   \n            }\n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","export function countingSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 50;\n        const maximum = Math.max.apply(Math, pxHeightList);\n        const minimum = Math.min.apply(Math, pxHeightList);\n        let rangeArray = [];\n        let countArray = [];\n        initializeArrays();\n        updateCountArray();\n        let cumSumArray = cumulativeSumArray(countArray);\n        sortHeightList();\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        console.log(shallowCopy);\n        function sortHeightList() {\n            let previousIndex = 0;\n            for (let i = 0; i < rangeArray.length; i++) {\n                if (cumSumArray[i] - previousIndex > 0) {\n                    updateHeightList(previousIndex, cumSumArray[i], rangeArray[i]);\n                    previousIndex = cumSumArray[i];\n                }\n            }\n        }\n\n        function updateHeightList(fromIndex, toIndex, value) {\n            for (let i = fromIndex; i < toIndex; i++) {\n                shallowCopy[i] = value;\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n            }\n        }\n\n        function initializeArrays() {\n            for (let i = minimum; i <= maximum; i++) {\n                rangeArray.push(i);\n                countArray.push(0);\n            }\n        }\n\n        function updateCountArray() {\n            for (let i = 0; i < pxHeightList.length; i++) {\n                countArray[pxHeightList[i] - minimum] += 1;\n            }\n        }\n\n        function cumulativeSumArray(array) {\n            let returnArray = [];\n            let previousEntry = 0;\n            for (let i = 0; i < array.length; i++) {\n                let newEntry = previousEntry + array[i];\n                returnArray.push(newEntry);\n                previousEntry = newEntry;\n            }\n            return returnArray;\n        }\n    }\n}","import React from 'react'\nimport Button from './Button.js'\nimport Slider from  './Slider.js'\nimport {useState} from 'react'\nimport {generateHeights, shuffleArray} from '../HelperFunctions.js'\nimport {bubbleSort} from '../algorithms/BubbleSort.js'\nimport {insertionSort} from '../algorithms/InsertionSort.js'\nimport {selectionSort} from '../algorithms/SelectionSort.js'\nimport {mergeSort} from '../algorithms/MergeSort.js'\nimport {quickSort} from '../algorithms/QuickSort.js'\nimport {heapSort} from '../algorithms/HeapSort.js'\nimport {shellSort} from '../algorithms/ShellSort.js'\nimport {countingSort} from '../algorithms/CountingSort.js'\nimport {timeouts} from '../HelperFunctions.js'\n\nconst ControlPanel = ({pxHeightList, setPxHeightList, numBars, setNumBars}) => {\n    const [sortInProgress, setSortInProgress] = useState(false);\n    const [sorted, setSorted] = useState(true);\n    \n    const updateView = (delayMultiplier, inherentDelayFactor, array) => {\n        timeouts.push(setTimeout((array) => {\n            setPxHeightList(array);\n        }, inherentDelayFactor * delayMultiplier, [...array]));\n    }\n\n    const finishSortStatus = (delayMultiplier, inherentDelayFactor) => {\n        timeouts.push(setTimeout(() => {\n            setSortInProgress(false);\n        }, inherentDelayFactor * delayMultiplier));\n    }\n\n    const algorithmDictionary = {\n        \"Bubble Sort\" : bubbleSort,\n        \"Insertion Sort\" : insertionSort,\n        \"Selection Sort\" : selectionSort,\n        \"Merge Sort\" : mergeSort,\n        \"Quick Sort\" : quickSort,\n        \"Heap Sort\" : heapSort,\n        \"Shell Sort\" : shellSort,\n        \"Counting Sort\" : countingSort\n    }\n\n    const sortingAlgorithm = (name) => {\n        algorithmDictionary[name](timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const shuffleAnon = () => {\n        shuffleArray(sortInProgress, pxHeightList, setPxHeightList, setSorted);\n    }\n\n    const changeNumBars = (event) => {\n        setNumBars(parseInt(event.target.value));\n        setPxHeightList(generateHeights(event.target.value));\n        setSorted(true);\n    }\n\n    const endAnimation = () => {\n        if (sortInProgress) {\n            for (let i = 0; i < timeouts.length; i++) {\n                clearTimeout(timeouts[i]);\n            }\n            timeouts.length = 0;\n            updateView(0, 0, generateHeights(numBars));\n            setSortInProgress(false);\n            setSorted(true);\n        }\n    }\n  \n    return (\n        <div id = \"controlPanel\">\n            <h1>Sorting Visualizer</h1>\n            <div id = \"controls\">\n                <Button clickable = {!sortInProgress} clickFunction = {shuffleAnon} text = \"Shuffle\"/>\n                <Button clickable = {sortInProgress} clickFunction = {endAnimation} text = \"End Animation\" />\n                <Slider changeable = {!sortInProgress} label = \"Number of Bars\" min = {10} max = {100} stateVariable = {numBars} alterState = {changeNumBars}/>\n                {Object.keys(algorithmDictionary).map((sortKey, index) => (\n                    <Button key = {index} clickable = {!sortInProgress && !sorted} clickFunction = {() => sortingAlgorithm(sortKey)} text = {sortKey} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default ControlPanel\n","const Bar = ({height}) => {\n    const rectangleStyling = {\n        height: `${height}px`\n    }\n    return (\n        <div style = {rectangleStyling} className = \"bar\" />\n    )\n}\n\nexport default Bar\n","import Bar from './Bar.js'\n\nconst Histogram = ({pxHeightList}) => {\n    return (\n        <div className = \"barContainer\">\n            {pxHeightList.map((height, index) => (\n                <Bar key = {index} height = {height}></Bar>\n            ))}\n        </div>\n    )\n}\n\nexport default Histogram\n","import './App.css';\nimport ControlPanel from './components/ControlPanel.js'\nimport Histogram from './components/Histogram.js'\nimport {useState} from 'react'\nimport {generateHeights} from './HelperFunctions.js'\n\nfunction App() {\n  const [numBars, setNumBars] = useState(55);\n  const [pxHeightList, setPxHeightList] = useState(generateHeights(numBars));\n  \n  return (\n    <div className = \"App\">\n      <ControlPanel pxHeightList = {pxHeightList} setPxHeightList = {setPxHeightList} numBars = {numBars} setNumBars = {setNumBars}/>\n      <Histogram pxHeightList = {pxHeightList} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}