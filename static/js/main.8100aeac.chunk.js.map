{"version":3,"sources":["components/Button.js","components/Slider.js","HelperFunctions.js","components/ControlPanel.js","algorithms/BubbleSort.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/MergeSort.js","algorithms/QuickSort.js","algorithms/HeapSort.js","algorithms/ShellSort.js","algorithms/CountingSort.js","components/Bar.js","components/Histogram.js","App.js","reportWebVitals.js","index.js"],"names":["Button","clickable","clickFunction","text","className","onClick","Slider","changeable","label","min","max","stateVariable","alterState","disabled","type","defaultValue","onChange","event","timeouts","generateHeights","numBars","windowHeight","window","innerHeight","heightMultiplyFactor","Math","floor","heightList","i","push","swapModel","j","array","ControlPanel","pxHeightList","setPxHeightList","setNumBars","useState","sortInProgress","setSortInProgress","sorted","setSorted","updateView","delayMultiplier","inherentDelayFactor","setTimeout","finishSortStatus","id","shallowCopy","length","random","shuffleArray","clearTimeout","parseInt","target","value","bubbleSort","curr","insertionSort","currMin","minIndex","selectionSort","merge","left","center","right","leftList","rightList","splice","delay","mergeSortHelper","mergeSort","partition","pivot","startIndex","quickSortHelper","partition_index","quickSort","buildMaxHeap","rootIndex","largestIndex","rightChildIndex","leftChildIndex","heapSortHelper","heapSort","gap","currRightElement","shellSort","updateHeightList","fromIndex","toIndex","maximum","apply","minimum","rangeArray","countArray","initializeArrays","updateCountArray","cumSumArray","returnArray","previousEntry","newEntry","cumulativeSumArray","previousIndex","sortHeightList","console","log","countingSort","Bar","height","rectangleStyling","style","Histogram","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8100aeac.chunk.js","sourcesContent":["const Button = ({clickable, clickFunction, text}) => {\n    return (\n        <button className = {clickable ? \"clickable\" : \"\"} onClick = {clickFunction}>{text}</button>\n    )\n}\n\nexport default Button\n","const Slider = ({changeable, label, min, max, stateVariable, alterState}) => {\n    const handleChange = (event) => {\n        alterState(event);\n    }\n    \n    return (\n        <div className = \"sliderContainer\">\n            <input disabled = {changeable ? false : true} type=\"range\" min={min} max={max} defaultValue = {stateVariable} onChange = {handleChange}/>\n            <label>{label}</label>\n        </div>\n    )\n}\n\nexport default Slider\n","export let timeouts = [];\n\nexport function generateHeights(numBars) {\n    let windowHeight = 0.8 * window.innerHeight;\n    const heightMultiplyFactor = Math.floor(windowHeight / numBars);\n    let heightList = []\n    for (let i = 1; i <= numBars; i++) {\n      heightList.push(i * heightMultiplyFactor);\n    }\n    return heightList;\n}\n\nexport function swapModel(i, j, array) {\n  [array[i], array[j]] = [array[j], array[i]];\n}\n\nexport function shuffleArray(sortInProgress, pxHeightList, setPxHeightList, setSorted) {\n  if (!sortInProgress) {\n      setSorted(false);\n      let shallowCopy = [...pxHeightList];\n      for (let i = shallowCopy.length - 1; i >= 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          swapModel(i, j, shallowCopy);\n      }\n      setPxHeightList(shallowCopy);\n  }\n}\n","import React from 'react'\nimport Button from './Button.js'\nimport Slider from  './Slider.js'\nimport {useState} from 'react'\nimport {generateHeights, shuffleArray} from '../HelperFunctions.js'\nimport {bubbleSort} from '../algorithms/BubbleSort.js'\nimport {insertionSort} from '../algorithms/InsertionSort.js'\nimport {selectionSort} from '../algorithms/SelectionSort.js'\nimport {mergeSort} from '../algorithms/MergeSort.js'\nimport {quickSort} from '../algorithms/QuickSort.js'\nimport {heapSort} from '../algorithms/HeapSort.js'\nimport {shellSort} from '../algorithms/ShellSort.js'\nimport {countingSort} from '../algorithms/CountingSort.js'\nimport {timeouts} from '../HelperFunctions.js'\n\nconst ControlPanel = ({pxHeightList, setPxHeightList, numBars, setNumBars}) => {\n    const [sortInProgress, setSortInProgress] = useState(false);\n    const [sorted, setSorted] = useState(true);\n\n    const updateView = (delayMultiplier, inherentDelayFactor, array) => {\n        timeouts.push(setTimeout((array) => {\n            setPxHeightList(array);\n        }, inherentDelayFactor * delayMultiplier, [...array]));\n    }\n\n    const finishSortStatus = (delayMultiplier, inherentDelayFactor) => {\n        timeouts.push(setTimeout(() => {\n            setSortInProgress(false);\n        }, inherentDelayFactor * delayMultiplier));\n    }\n\n    const shuffleAnon = () => {\n        shuffleArray(sortInProgress, pxHeightList, setPxHeightList, setSorted);\n    }\n\n    const bubbleSortAnon = () => {\n        bubbleSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const insertionSortAnon = () => {\n        insertionSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const selectionSortAnon = () => {\n        selectionSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const mergeSortAnon = () => {\n        mergeSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const quickSortAnon = () => {\n        quickSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const heapSortAnon = () => {\n        heapSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const shellSortAnon = () => {\n        shellSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const countingSortAnon = () => {\n        countingSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted);\n    }\n\n    const changeNumBars = (event) => {\n        setNumBars(parseInt(event.target.value));\n        setPxHeightList(generateHeights(event.target.value));\n        setSorted(true);\n    }\n\n    const endAnimation = () => {\n        if (sortInProgress) {\n            for (let i = 0; i < timeouts.length; i++) {\n                clearTimeout(timeouts[i]);\n            }\n            timeouts.length = 0;\n            updateView(0, 0, generateHeights(numBars));\n            setSortInProgress(false);\n            setSorted(true);\n        }\n    }\n  \n    return (\n        <div id = \"controlPanel\">\n            <h1>Sorting Visualizer</h1>\n            <div id = \"buttonControls\">\n                <Button clickable = {!sortInProgress} clickFunction = {shuffleAnon} text = \"Shuffle\"/>\n                <Button clickable = {sortInProgress} clickFunction = {endAnimation} text = \"End Animation\" />\n                <Slider changeable = {!sortInProgress} label = \"Number of Bars\" min = {10} max = {100} stateVariable = {numBars} alterState = {changeNumBars}/>\n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {bubbleSortAnon} text = \"Bubble Sort\" />\n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {insertionSortAnon} text = \"Insertion Sort\" />\n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {selectionSortAnon} text = \"Selection Sort\" />\n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {mergeSortAnon} text = \"Merge Sort\" />\n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {quickSortAnon} text = \"Quick Sort\" /> \n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {heapSortAnon} text = \"Heap Sort\" /> \n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {shellSortAnon} text = \"Shell Sort\" /> \n                <Button clickable = {!sortInProgress && !sorted} clickFunction = {countingSortAnon} text = \"Counting Sort\" /> \n            </div>\n        </div>\n    )\n}\n\nexport default ControlPanel\n","import {swapModel} from '../HelperFunctions.js'\n\nexport function bubbleSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 10;\n        for (let i = 0; i < shallowCopy.length; i++) {\n            for (let j = i + 1; j < shallowCopy.length; j++) {\n                if (shallowCopy[i] > shallowCopy[j]) {\n                    swapModel(i, j, shallowCopy);\n                    updateView(delayMultiplier, delay, shallowCopy);\n                    delayMultiplier += 1;   \n                }\n            }\n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","export function insertionSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 50;\n        for (let i = 1; i < shallowCopy.length; i++) {\n            let curr = shallowCopy[i];\n            let j = i - 1;\n            while (j >= 0 && shallowCopy[j] > curr) {\n                shallowCopy[j + 1] = shallowCopy[j];\n                j--;\n            }\n            shallowCopy[j + 1] = curr;\n            updateView(delayMultiplier, delay, shallowCopy);\n            delayMultiplier += 1;   \n\n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","import {swapModel} from '../HelperFunctions.js'\n\nexport function selectionSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 100;\n        for (let i = 0; i < shallowCopy.length; i++) {\n            let currMin = shallowCopy[i];\n            let minIndex = i;\n            for (let j = i + 1; j < shallowCopy.length; j++) {\n                if (currMin > shallowCopy[j]) {\n                    currMin = shallowCopy[j];\n                    minIndex = j;\n                }\n            }\n            swapModel(i, minIndex, shallowCopy);\n            updateView(delayMultiplier, delay, shallowCopy);\n            delayMultiplier += 1;\n\n            \n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","export function mergeSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 10;\n        mergeSortHelper(0, shallowCopy.length - 1);\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        function mergeSortHelper(left, right) {\n            if (left < right) {\n                let center = Math.floor((left + right) / 2);\n                mergeSortHelper(left, center);\n                mergeSortHelper(center + 1, right);\n                merge(left, center, right);\n            }\n        }\n    \n        function merge(left, center, right) {\n            let leftList = [];\n            let rightList = [];\n            for (let i = left; i <= center; i++) {\n                leftList.push(shallowCopy[i]);\n            }\n            for (let i = center + 1; i <= right; i++) {\n                rightList.push(shallowCopy[i]);\n            }\n            for (let i = left; i <= right; i++) {\n                if (leftList.length === 0) {\n                    shallowCopy[i] = rightList[0];\n                    rightList = rightList.splice(1);\n                } else if (rightList.length === 0 || leftList[0] < rightList[0]) {\n                    shallowCopy[i] = leftList[0];\n                    leftList = leftList.splice(1);\n                } else {\n                    shallowCopy[i] = rightList[0];\n                    rightList = rightList.splice(1);\n                }\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n            }\n        }\n    }\n}","import { swapModel } from \"../HelperFunctions\";\n\nexport function quickSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 20;\n        quickSortHelper(0, shallowCopy.length - 1);\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        function quickSortHelper(left, right) {\n            if (left < right) {\n                let partition_index = partition(left, right);\n                quickSortHelper(left, partition_index - 1);\n                quickSortHelper(partition_index + 1, right);\n            }\n        }\n\n        function partition(left, right) {\n            let pivot = shallowCopy[right];\n            let startIndex = left - 1;\n            for (let j = left; j < right; j++) {\n                if (shallowCopy[j] <= pivot) {\n                    startIndex++;\n                    swapModel(startIndex, j, shallowCopy);\n                    updateView(delayMultiplier, delay, shallowCopy);\n                    delayMultiplier += 1;\n                }\n            }\n            startIndex++;\n            swapModel(startIndex, right, shallowCopy);\n            updateView(delayMultiplier, delay, shallowCopy);\n            delayMultiplier += 1;\n            return startIndex;\n        }\n    }\n}","import { swapModel } from \"../HelperFunctions\";\n\nexport function heapSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 50;\n        heapSortHelper(shallowCopy.length);\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        function heapSortHelper(length) {\n            for (let i = Math.floor(length / 2 - 1); i >= 0; i--) {\n                buildMaxHeap(i, length);\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n            }\n            for (let i = length - 1; i > 0; i--) {\n                swapModel(0, i, shallowCopy);\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n                buildMaxHeap(0, i);\n            }\n        }\n\n        function buildMaxHeap(rootIndex, length) {\n            let largestIndex = rootIndex;\n            let rightChildIndex = rootIndex * 2 + 2;\n            let leftChildIndex = rootIndex * 2 + 1;\n            if (leftChildIndex < length && shallowCopy[leftChildIndex] > shallowCopy[largestIndex]) {\n                largestIndex = leftChildIndex;\n            }\n            if (rightChildIndex < length && shallowCopy[rightChildIndex] > shallowCopy[largestIndex]) {\n                largestIndex = rightChildIndex;\n            }\n            if (largestIndex !== rootIndex) {\n                swapModel(largestIndex, rootIndex, shallowCopy);\n                buildMaxHeap(largestIndex, length);\n            }\n        }\n    }\n}","export function shellSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 20;\n        for (let gap = Math.floor(shallowCopy.length / 2); gap >= 1; gap = Math.floor(gap / 2)) {\n            for (let i = gap; i < shallowCopy.length; i++) {\n                let currRightElement = shallowCopy[i];\n                let j = i;\n                for (j; j >= gap && shallowCopy[j - gap] > currRightElement; j -= gap) {\n                    shallowCopy[j] = shallowCopy[j - gap];\n                }\n                shallowCopy[j] = currRightElement;\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;   \n            }\n        }\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n    }\n}","export function countingSort(timeouts, sortInProgress, setSortInProgress, pxHeightList, updateView, finishSortStatus, sorted, setSorted) {\n    if (!sortInProgress && !sorted) {\n        setSortInProgress(true);\n        timeouts.length = 0;\n        let delayMultiplier = 1;\n        let shallowCopy = [...pxHeightList];\n        const delay = 50;\n        const maximum = Math.max.apply(Math, pxHeightList);\n        const minimum = Math.min.apply(Math, pxHeightList);\n        let rangeArray = [];\n        let countArray = [];\n        initializeArrays();\n        updateCountArray();\n        let cumSumArray = cumulativeSumArray(countArray);\n        sortHeightList();\n        setSorted(true);\n        finishSortStatus(delayMultiplier, delay);\n        console.log(shallowCopy);\n        function sortHeightList() {\n            let previousIndex = 0;\n            for (let i = 0; i < rangeArray.length; i++) {\n                if (cumSumArray[i] - previousIndex > 0) {\n                    updateHeightList(previousIndex, cumSumArray[i], rangeArray[i]);\n                    previousIndex = cumSumArray[i];\n                }\n            }\n        }\n\n        function updateHeightList(fromIndex, toIndex, value) {\n            for (let i = fromIndex; i < toIndex; i++) {\n                shallowCopy[i] = value;\n                updateView(delayMultiplier, delay, shallowCopy);\n                delayMultiplier += 1;\n            }\n        }\n\n        function initializeArrays() {\n            for (let i = minimum; i <= maximum; i++) {\n                rangeArray.push(i);\n                countArray.push(0);\n            }\n        }\n\n        function updateCountArray() {\n            for (let i = 0; i < pxHeightList.length; i++) {\n                countArray[pxHeightList[i] - minimum] += 1;\n            }\n        }\n\n        function cumulativeSumArray(array) {\n            let returnArray = [];\n            let previousEntry = 0;\n            for (let i = 0; i < array.length; i++) {\n                let newEntry = previousEntry + array[i];\n                returnArray.push(newEntry);\n                previousEntry = newEntry;\n            }\n            return returnArray;\n        }\n    }\n}","const Bar = ({height}) => {\n    const rectangleStyling = {\n        height: `${height}px`\n    }\n    return (\n        <div style = {rectangleStyling} className = \"bar\" />\n    )\n}\n\nexport default Bar\n","import Bar from './Bar.js'\n\nconst Histogram = ({pxHeightList}) => {\n    return (\n        <div className = \"barContainer\">\n            {pxHeightList.map((height, index) => (\n                <Bar key = {index} height = {height}></Bar>\n            ))}\n        </div>\n    )\n}\n\nexport default Histogram\n","import './App.css';\nimport ControlPanel from './components/ControlPanel.js'\nimport Histogram from './components/Histogram.js'\nimport {useState} from 'react'\nimport {generateHeights} from './HelperFunctions.js'\n\nfunction App() {\n  const [numBars, setNumBars] = useState(55);\n  const [pxHeightList, setPxHeightList] = useState(generateHeights(numBars));\n  \n  return (\n    <div className = \"App\">\n      <ControlPanel pxHeightList = {pxHeightList} setPxHeightList = {setPxHeightList} numBars = {numBars} setNumBars = {setNumBars}/>\n      <Histogram pxHeightList = {pxHeightList} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}